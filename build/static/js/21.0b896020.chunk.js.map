{"version":3,"sources":["components/ContactForm/styles.js","components/ContactForm/index.js"],"names":["ContactContainer","styled","div","Contact","section","Button","form","span","button","props","color","width","Row","React","lazy","Col","OtherComponent","Block","ContactForm","title","content","id","useForm","register","handleSubmit","reset","errors","formState","useState","disabled","setDisabled","onSubmit","data","a","firstName","email","subject","message","menu","suburb","number","templateParams","emailjs","send","toast","success","position","POSITION","TOP_CENTER","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","className","toastId","console","log","type","align","justify","lg","md","sm","padding","noValidate","autoComplete","required","value","maxLength","name","placeholder","pattern","defaultValue","hidden","rows","minLength","onClick","shouldFocus","href","fallback","height"],"mappings":"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","file":"static/js/21.0b896020.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const ContactContainer = styled.div`\r\n  padding: 8rem 10px;\r\n  padding-left:40px;\r\n  padding-right:40px;\r\n  @media only screen and (min-width: 980px) {\r\n    padding: 6rem 3rem;\r\n  }\r\n\r\n`;\r\n\r\nexport const Contact = styled.section`\r\n  position: relative;\r\n  width: 100%;\r\n`;\r\n\r\nexport const IconContainer = styled.div`\r\n  @media only screen and (min-width: 980px) {\r\n    padding: 10rem 7rem;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled.form`\r\n  width: 100%;\r\n  max-width: 520px;\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled.span`\r\n  display: block;\r\n  font-family: 'Ubuntu', sans-serif;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled.div`\r\n  text-align: end;\r\n  position: relative;\r\n  margin-bottom: 2.75rem;\r\n  margin-top: 0rem;\r\n  @media only screen and (max-width: 414px) {\r\n    // padding-top: 0.75rem;\r\n    \r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background: ${(props) => props.color || 'rgb(209, 29, 50)'};\r\n  color: ${(props) => (props.color ? 'rgb(209, 29, 50)' : '#fff')};\r\n  font-size: 1rem;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  border: ${(props) => (props.color ? '1px solid #687864' : '0px')};\r\n  border-radius: 8px;\r\n  height: 60px;\r\n  outline: none;\r\n  cursor: pointer;\r\n  margin-top: 1rem;\r\n  max-width: 180px;\r\n  margin-bottom: 1rem;\r\n  float: right;\r\n  @media only screen and (max-width: 1024px) {\r\n    width: ${(props) => (props.width ? '180px' : '100%')};\r\n  }\r\n  @media only screen and (max-width: 768px) {\r\n    width: ${(props) => (props.width ? '180px' : '100%')};\r\n  }\r\n  @media only screen and (max-width: 480px) {\r\n    width: ${(props) => (props.width ? '180px' : '100%')};\r\n    margin-left: 0rem;\r\n  }\r\n`;","import React, { lazy, Suspense, useState } from \"react\";\r\nimport { useForm } from 'react-hook-form';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport emailjs from 'emailjs-com';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport * as S from \"./styles\";\r\nimport './stylesForm.css';\r\nimport Loader from \"react-loader-spinner\";\r\nimport { LazyLoadComponent } from 'react-lazy-load-image-component';\r\n\r\nconst Row = React.lazy(() => import(/* webpackChunkName: \"sula-antd\" */ 'antd/lib/grid/row'));\r\nconst Col = React.lazy(() => import(/* webpackChunkName: \"sula-antd\" */ 'antd/lib/grid/col'));\r\nconst OtherComponent = lazy(() => import(\"../First.js\"));\r\nconst Block = lazy(() => import(\"../Block\"));\r\n\r\nconst ContactForm = ({ title, content, id }) => {\r\n    const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors }\r\n    } = useForm();\r\n    const [disabled, setDisabled] = useState(false);\r\n\r\n    // Function that displays a success toast on bottom right of the page when form submission is successful\r\n    const toastifySuccess = () => {\r\n        toast.success('Form sent!', {\r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 5000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false,\r\n            className: 'submit-feedback success',\r\n            toastId: 'notifyToast'\r\n        });\r\n    };\r\n    // Function called on submit that uses emailjs to send email of valid contact form\r\n    const onSubmit = async (data) => {\r\n    // Destrcture data object\r\n    const { firstName, email, subject, message, menu, suburb, number} = data;\r\n    try {\r\n        // Disable form while processing submission\r\n    setDisabled(true);\r\n\r\n        // Define template params\r\n    const templateParams = {\r\n        firstName,\r\n        email,\r\n        subject,\r\n        message, \r\n        menu,\r\n        suburb,\r\n        number\r\n    };\r\n\r\n        // Use emailjs to email contact form data\r\n    await emailjs.send(\r\n                \"service_a9ktqlp\",\r\n                \"template_l0mglga\",\r\n                templateParams,\r\n                \"user_yw3a8DYtaKOIm8KcBtk2L\"\r\n    );\r\n        // Reset contact form fields after submission\r\n        reset();\r\n        // Display success toast\r\n        toastifySuccess();\r\n        // Re-enable form submission\r\n        setDisabled(false);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n    };\r\n\r\n    return (\r\n    <S.ContactContainer id={id} >\r\n        <S.Contact>\r\n            <Row type=\"flex\"  align=\"middle\" justify=\"center\">\r\n                <Col lg={12} md={12} sm={24}>\r\n                    <Block padding={true} title={title} content={content} />\r\n                        <form id='contact-form' onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\">\r\n                            <Col span={24}>\r\n                                <input\r\n                                    {...register('firstName', {\r\n                                    required: {\r\n                                        value: true,\r\n                                        message: 'Please enter your name'\r\n                                    },\r\n                                    maxLength: {\r\n                                        value: 30,\r\n                                        message: 'Please use 30 characters or less'\r\n                                    }\r\n                                    })}\r\n                                    type=\"text\" \r\n                                    name=\"firstName\"\r\n                                    id=\"firstName\"\r\n                                    placeholder=\"Name *\"\r\n                                ></input>\r\n                                {errors.firstName && <span className='errorMessage'>{errors.firstName.message}</span>}\r\n                                </Col>\r\n                                <Col span={24}>\r\n                                <input\r\n                                    type='email'\r\n                                    name='email'\r\n                                    {...register('email', {\r\n                                    required: true,\r\n                                    pattern:\r\n                                        /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n                                    })}\r\n                                    className='form-control formInput'\r\n                                    placeholder='JohnSmith@email.com *'\r\n                                    id=\"inputEmail\"\r\n                                ></input>\r\n                                {errors.email && (\r\n                                    <span className='errorMessage'>Please enter a valid email address</span>\r\n                                )}\r\n                                </Col>\r\n                            <Col span={24}>\r\n                                <input\r\n                                    {...register('number', {\r\n                                        required: true,\r\n                                        pattern: /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s.0-9]*$/\r\n                                    },\r\n                                    )}\r\n                                    type=\"text\" \r\n                                    name=\"number\"\r\n                                    id=\"number\"\r\n                                    placeholder='Phone Number *'\r\n                                    autoComplete=\"off\"\r\n                                ></input>\r\n                                {errors.number && <span className='errorMessage'>Please enter your phone number</span>}\r\n                                </Col>\r\n                        <Col span={24}>\r\n                                <input\r\n                                    {...register('suburb', {\r\n                                    required: {\r\n                                        value: true,\r\n                                        message: 'Please enter your suburb'\r\n                                    },\r\n                                    maxLength: {\r\n                                        value: 30,\r\n                                        message: 'Please use 30 characters or less'\r\n                                    }\r\n                                    })}\r\n                                    type=\"text\" \r\n                                    name=\"suburb\"\r\n                                    id=\"suburb\"\r\n                                    placeholder='Suburb Name*'\r\n                                ></input>\r\n                                {errors.suburb && <span className='errorMessage suburb'>{errors.suburb.message}</span>}\r\n                                </Col>\r\n                            <Row type=\"flex\" justify=\"space-between\">\r\n                            <Col span={24} lg={12} md={24} sm={24}>\r\n                                <select\r\n                                    type='menu'\r\n                                    name='menu'\r\n                                    id=\"menu\"\r\n                                    defaultValue=\"\"\r\n                                    {...register('menu', {\r\n                                    required: {\r\n                                        value: true,\r\n                                        message: 'Please select from menu'\r\n                                    },\r\n                                    })}\r\n                                >\r\n                                <option \r\n                                value=\"\" \r\n                                disabled \r\n                                hidden \r\n                                className=\"hidden\">What can we help you with? *</option>\r\n                                    <option value=\"Residential\">Residential</option>\r\n                                    <option value=\"Strata / Property Maintenance\">Strata / Property Maintenance</option>\r\n                                    <option value=\"Commercial\">Commercial</option>\r\n                                    <option value=\"Other\">Other</option>\r\n                                </select>\r\n                                {errors.menu && (\r\n                                    <span className='errorMessage'>{errors.menu.message}</span>\r\n                                )}\r\n                            </Col>\r\n                        <Col span={24} lg={12} md={24} sm={24}>\r\n                                <input\r\n                                    type='text'\r\n                                    name='subject'\r\n                                    {...register('subject', {\r\n                                    required: {\r\n                                        value: true,\r\n                                        message: 'Please enter a subject'\r\n                                    },\r\n                                    maxLength: {\r\n                                        value: 55,\r\n                                        message: 'Subject cannot exceed 55 characters'\r\n                                    }\r\n                                    })}\r\n                                    className='form-control formInput'\r\n                                    placeholder='Subject *'\r\n                                    id=\"subject\"\r\n                                ></input>\r\n                                {errors.subject && (\r\n                                    <span className='errorMessage'>{errors.subject.message}</span>\r\n                                )}\r\n                                </Col>\r\n                        </Row>\r\n                        <Col span={24} >\r\n                                <textarea\r\n                                    rows={3}\r\n                                    name='message'\r\n                                    {...register('message', {\r\n                                    required: {\r\n                                        value: true,\r\n                                        message: 'Please enter your message'\r\n                                    },\r\n                                    maxLength: {\r\n                                        value: 300,\r\n                                        message: 'Please use 300 characters or less'\r\n                                    },\r\n                                    minLength: {\r\n                                        value: 2,\r\n                                        message: 'Please use more then  2 characters. max: 300'\r\n                                    }\r\n                                    })}\r\n                                    className='form-control formInput'\r\n                                    placeholder='Message *'\r\n                                ></textarea>\r\n                                {errors.message && <span className='errorMessage'>{errors.message.message}</span>}\r\n                            </Col>\r\n                            <S.Button className='submit-btn' disabled={disabled} type='submit' onClick={() => {\r\n                                    register(\"firstName\", { type: \"focus\" }, { shouldFocus: true });\r\n                                    }}>\r\n                                Submit\r\n                            </S.Button>\r\n                            </form>\r\n                                <ToastContainer />\r\n                                </Col>\r\n                                <Col lg={12} md={11} sm={24}>\r\n                            <div id=\"TextAddress\">\r\n                                <div className=\"formText\" >\r\n                                    <a href=\"tel:02-9419-7947\" id=\"TextNumber\">\r\n                                        Ph: (02) 9419 7947 \r\n                                        </a>\r\n                                    </div> \r\n                                <div className=\"formText\">\r\n                                    <a href=\"https://goo.gl/maps/hrBNba4G8a1EbgFg6\" >\r\n                                        Unit 17, 4-6 Chaplin Drive Lane Cove West NSW 2066\r\n                                    </a>\r\n                                    </div>\r\n                                </div>\r\n                                    <Suspense fallback={<div>\r\n                                        <Loader\r\n                                        type=\"BallTriangle\" \r\n                                        color=\"#00BFFF\" \r\n                                        height={80} \r\n                                        width={80} />\r\n                                        </div>}>\r\n                                    <LazyLoadComponent>\r\n                                <OtherComponent/>\r\n                            </LazyLoadComponent>\r\n                        </Suspense>\r\n                    </Col>\r\n                </Row>\r\n        </S.Contact>\r\n    </S.ContactContainer>\r\n    );\r\n};\r\n\r\nexport default ContactForm;\r\n"],"sourceRoot":""}